plugins {
	id 'org.springframework.boot' version '2.1.16.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
}

repositories {
	mavenLocal()
	mavenCentral()
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "jacoco"

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
	set('springCloudVersion', "Greenwich.SR6")
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile 'org.springframework.cloud:spring-cloud-starter-openfeign'
    compile 'org.springframework.cloud:spring-cloud-starter-netflix-ribbon'
    compile 'io.github.openfeign:feign-httpclient'
    compile 'io.github.openfeign:feign-jackson'
    compile group: 'org.javamoney', name: 'moneta', version: '1.3'
	compile group: 'com.jsoniter', name: 'jsoniter', version: '0.9.23'
	compile group: 'tripmaster', name : 'common', version : '1.0.0' 
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
	
    testCompile("junit:junit")
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.1.6.RELEASE'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

jacoco {
    toolVersion = "0.8.4"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = 0.5
      }
    }
  }
}

version='1.0.0'

bootJar {
    baseName = "${project.name}"
    version =  "${project.version}"
	mainClassName = "tripmaster.${project.name}.Application"
}

task dockerJar {
	delete 'docker/${project.name}.jar'
	doLast {
		copy {
	        from "build/libs/${project.name}-${project.version}.jar"
		    rename "${project.name}-${project.version}.jar", "${project.name}.jar"
	        into 'docker'
    	}
    }
	dependsOn bootJar
}

task dockerBuildImage(type:Exec) {
	workingDir "${projectDir}/docker"
    commandLine "docker", "build", "-t", "${project.name}", "."
	dependsOn dockerJar
}
task unloadDockerImage(type:Exec) {
   	commandLine "docker", "image", "rm", "${project.name}", "-f"
}
task zipDockerImage(type:Exec) {
	workingDir "${projectDir}/docker"
   	commandLine "7z", "a", "${project.name}.zip", "${project.name}.tar"
}
task saveDockerImage(type:Exec) {
	group = 'tripmaster'
	dependsOn dockerBuildImage
	doFirst {
	    workingDir "${projectDir}/docker"
	    standardOutput new FileOutputStream("${projectDir}/docker/${project.name}.tar")
	}
    commandLine "docker", "save", "${project.name}"
    finalizedBy zipDockerImage
    finalizedBy unloadDockerImage
}

task unzipDockerImageGps(type:Exec) {
	workingDir "${projectDir}/docker"
   	commandLine "7z", "e", "-y", "${projectDir}/../gps/docker/gps.zip"
}
task loadDockerImageGps(type:Exec) {
	dependsOn unzipDockerImageGps
    doFirst {
    	standardInput new FileInputStream("${projectDir}/docker/gps.tar")
    }
   	commandLine "docker", "load"
}

task unzipDockerImageReward(type:Exec) {
	workingDir "${projectDir}/docker"
   	commandLine "7z", "e", "-y", "${projectDir}/../reward/docker/reward.zip"
}
task loadDockerImageReward(type:Exec) {
	dependsOn unzipDockerImageReward
    doFirst {
    	standardInput new FileInputStream("${projectDir}/docker/reward.tar")
    }
   	commandLine "docker", "load"
}

task unzipDockerImageTrip(type:Exec) {
	workingDir "${projectDir}/docker"
   	commandLine "7z", "e", "-y", "${projectDir}/../trip/docker/trip.zip"
}
task loadDockerImageTrip(type:Exec) {
	dependsOn unzipDockerImageTrip
    doFirst {
    	standardInput new FileInputStream("${projectDir}/docker/trip.tar")
    }
   	commandLine "docker", "load"
}

task prepareDockerCompose(type:Exec) {
    dependsOn loadDockerImageGps
    dependsOn loadDockerImageReward
    dependsOn loadDockerImageTrip
    dependsOn saveDockerImage
	doFirst {
	    standardInput new FileInputStream("${projectDir}/docker/${project.name}.tar")
	}
    commandLine "docker", "load"
    doLast {
    	workingDir "${projectDir}/docker"
	    commandLine "docker-compose", "down"
    }
}

task runDockerCompose(type:Exec) {
	group = 'tripmaster'
    workingDir "${projectDir}/docker"
    commandLine "docker-compose", "up", "-d"
    dependsOn prepareDockerCompose
}
